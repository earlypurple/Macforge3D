import trimesh
try:
    import pymeshfix  # type: ignore
    PYMESHFIX_AVAILABLE = True
except ImportError:
    PYMESHFIX_AVAILABLE = False
    print("‚ö†Ô∏è  pymeshfix not available, using fallback mesh repair")

import numpy as np
import os
import shutil
import logging
from pathlib import Path
from typing import Optional, Tuple, Dict, Any, List
import time

# Optional imports with fallbacks
try:
    from scipy.spatial import cKDTree
    SCIPY_AVAILABLE = True
except ImportError:
    SCIPY_AVAILABLE = False
    print("‚ö†Ô∏è  scipy not available, some features may be limited")

try:
    from sklearn.cluster import DBSCAN
    SKLEARN_AVAILABLE = True
except ImportError:
    SKLEARN_AVAILABLE = False
    print("‚ö†Ô∏è  sklearn not available, some features may be limited")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_mesh_quality(mesh: trimesh.Trimesh) -> Dict[str, Any]:
    """Analyse compl√®te et avanc√©e de la qualit√© d'un maillage."""
    start_time = time.time()
    
    try:
        analysis = {
            "basic_stats": {
                "vertices": len(mesh.vertices),
                "faces": len(mesh.faces),
                "edges": len(mesh.edges),
                "volume": float(mesh.volume) if mesh.is_watertight else None,
                "surface_area": float(mesh.area),
                "is_watertight": mesh.is_watertight,
                "is_winding_consistent": mesh.is_winding_consistent,
                "is_empty": mesh.is_empty
            },
            "geometric_quality": {},
            "topological_quality": {},
            "edge_quality": {},
            "vertex_quality": {},
            "processing_time": 0.0
        }
        
        # Analyse g√©om√©trique avanc√©e
        bounds = mesh.bounds
        dimensions = bounds[1] - bounds[0]
        
        analysis["geometric_quality"] = {
            "bounding_box": {
                "min": bounds[0].tolist(),
                "max": bounds[1].tolist(),
                "dimensions": dimensions.tolist(),
                "aspect_ratio": float(np.max(dimensions) / np.min(dimensions)) if np.min(dimensions) > 0 else float('inf')
            },
            "centroid": mesh.centroid.tolist(),
            "scale": float(mesh.scale),
            "convex_hull_ratio": float(mesh.area / mesh.convex_hull.area) if mesh.convex_hull else 0.0,
            "bounding_sphere_radius": float(np.linalg.norm(mesh.vertices - mesh.centroid, axis=1).max())
        }
        
        # Analyse topologique avanc√©e
        try:
            euler_number = len(mesh.vertices) - len(mesh.edges) + len(mesh.faces)
            genus = (2 - euler_number) // 2
            
            # D√©tection de d√©fauts topologiques
            boundary_edges = mesh.edges[mesh.edges_unique_inverse == -1] if hasattr(mesh, 'edges_unique_inverse') else []
            non_manifold_edges = []
            
            analysis["topological_quality"] = {
                "euler_number": euler_number,
                "estimated_genus": genus,
                "connected_components": len(mesh.split(only_watertight=False)),
                "watertight_components": len(mesh.split(only_watertight=True)),
                "boundary_edges_count": len(boundary_edges),
                "non_manifold_edges_count": len(non_manifold_edges),
                "manifold_score": 1.0 - (len(boundary_edges) + len(non_manifold_edges)) / max(1, len(mesh.edges))
            }
        except Exception as e:
            logger.warning(f"Erreur analyse topologique: {e}")
            analysis["topological_quality"] = {"error": str(e)}
        
        # Analyse de la qualit√© des triangles avanc√©e
        if len(mesh.faces) > 0:
            face_areas = mesh.area_faces
            face_angles = mesh.face_angles
            
            # Calcul du rapport d'aspect des triangles
            edge_lengths = np.linalg.norm(
                mesh.vertices[mesh.faces[:, [1, 2, 0]]] - mesh.vertices[mesh.faces], 
                axis=2
            )
            perimeters = np.sum(edge_lengths, axis=1)
            aspect_ratios = perimeters**2 / (4 * np.sqrt(3) * face_areas + 1e-10)
            
            # Calcul de la r√©gularit√© angulaire
            angle_deviations = np.abs(face_angles - np.pi/3)  # D√©viation par rapport √† 60¬∞
            
            analysis["geometric_quality"].update({
                "triangle_quality": {
                    "min_area": float(np.min(face_areas)),
                    "max_area": float(np.max(face_areas)),
                    "mean_area": float(np.mean(face_areas)),
                    "area_std": float(np.std(face_areas)),
                    "area_uniformity": 1.0 - float(np.std(face_areas) / (np.mean(face_areas) + 1e-10)),
                    "min_angle_deg": float(np.min(face_angles) * 180 / np.pi),
                    "max_angle_deg": float(np.max(face_angles) * 180 / np.pi),
                    "mean_angle_deviation": float(np.mean(angle_deviations) * 180 / np.pi),
                    "degenerate_faces": int(np.sum(face_areas < 1e-10)),
                    "aspect_ratio": {
                        "min": float(np.min(aspect_ratios)),
                        "max": float(np.max(aspect_ratios)),
                        "mean": float(np.mean(aspect_ratios)),
                        "quality_score": float(np.mean(1.0 / (aspect_ratios + 1e-10)))
                    }
                }
            })
        
        # Analyse de la qualit√© des ar√™tes
        if len(mesh.edges) > 0:
            edge_vectors = mesh.vertices[mesh.edges[:, 1]] - mesh.vertices[mesh.edges[:, 0]]
            edge_lengths = np.linalg.norm(edge_vectors, axis=1)
            
            analysis["edge_quality"] = {
                "length_stats": {
                    "min": float(np.min(edge_lengths)),
                    "max": float(np.max(edge_lengths)),
                    "mean": float(np.mean(edge_lengths)),
                    "std": float(np.std(edge_lengths)),
                    "uniformity": 1.0 - float(np.std(edge_lengths) / (np.mean(edge_lengths) + 1e-10))
                },
                "zero_length_edges": int(np.sum(edge_lengths < 1e-10)),
                "length_distribution_score": float(1.0 / (1.0 + np.std(edge_lengths) / (np.mean(edge_lengths) + 1e-10)))
            }
        
        # Analyse de la qualit√© des vertices
        if len(mesh.vertices) > 0:
            # Calcul du degr√© des vertices (nombre d'ar√™tes connect√©es)
            vertex_degrees = np.zeros(len(mesh.vertices))
            for edge in mesh.edges:
                vertex_degrees[edge[0]] += 1
                vertex_degrees[edge[1]] += 1
            
            # D√©tection de vertices isol√©s ou avec degr√© anormal
            isolated_vertices = np.sum(vertex_degrees == 0)
            low_degree_vertices = np.sum(vertex_degrees < 3)
            high_degree_vertices = np.sum(vertex_degrees > 8)
            
            analysis["vertex_quality"] = {
                "degree_stats": {
                    "min": int(np.min(vertex_degrees)),
                    "max": int(np.max(vertex_degrees)),
                    "mean": float(np.mean(vertex_degrees)),
                    "std": float(np.std(vertex_degrees))
                },
                "isolated_vertices": int(isolated_vertices),
                "low_degree_vertices": int(low_degree_vertices),
                "high_degree_vertices": int(high_degree_vertices),
                "regularity_score": float(1.0 - np.std(vertex_degrees) / (np.mean(vertex_degrees) + 1e-10))
            }
        
        # Score de qualit√© global
        quality_scores = []
        if "triangle_quality" in analysis["geometric_quality"]:
            quality_scores.append(analysis["geometric_quality"]["triangle_quality"]["aspect_ratio"]["quality_score"])
        if "manifold_score" in analysis["topological_quality"]:
            quality_scores.append(analysis["topological_quality"]["manifold_score"])
        if "length_distribution_score" in analysis["edge_quality"]:
            quality_scores.append(analysis["edge_quality"]["length_distribution_score"])
        if "regularity_score" in analysis["vertex_quality"]:
            quality_scores.append(analysis["vertex_quality"]["regularity_score"])
        
        analysis["overall_quality_score"] = float(np.mean(quality_scores)) if quality_scores else 0.0
        
        analysis["processing_time"] = time.time() - start_time
        return analysis
        
    except Exception as e:
        logger.error(f"Erreur analyse maillage: {e}")
        return {
            "error": str(e),
            "processing_time": time.time() - start_time
        }

def repair_mesh_advanced(
    input_path: str, 
    output_path: str,
    method: str = "auto",
    aggressive: bool = False,
    preserve_details: bool = True
) -> Tuple[bool, Dict[str, Any]]:
    """
    R√©pare un maillage avec m√©thodes avanc√©es.

    Args:
        input_path: Chemin vers le maillage d'entr√©e
        output_path: Chemin de sortie
        method: M√©thode de r√©paration ("pymeshfix", "trimesh", "auto")
        aggressive: R√©paration agressive (peut perdre des d√©tails)
        preserve_details: Pr√©server les d√©tails fins

    Returns:
        Tuple (succ√®s, m√©tadonn√©es de r√©paration)
    """
    start_time = time.time()
    
    try:
        logger.info(f"üîß R√©paration avanc√©e: {input_path} -> {output_path}")
        
        # Charger le maillage
        mesh = trimesh.load_mesh(input_path, process=False)
        original_analysis = analyze_mesh_quality(mesh)
        
        logger.info(f"üìä Maillage original: {original_analysis['basic_stats']}")
        
        # Choisir la m√©thode de r√©paration
        if method == "auto":
            if PYMESHFIX_AVAILABLE and len(mesh.vertices) < 100000:
                method = "pymeshfix"
            else:
                method = "trimesh"
        
        repaired_mesh = None
        repair_info = {"method": method, "steps": []}
        
        if method == "pymeshfix" and PYMESHFIX_AVAILABLE:
            repaired_mesh, steps = _repair_with_pymeshfix(mesh, aggressive)
            repair_info["steps"] = steps
            
        elif method == "trimesh":
            repaired_mesh, steps = _repair_with_trimesh(mesh, aggressive, preserve_details)
            repair_info["steps"] = steps
            
        else:
            raise ValueError(f"M√©thode de r√©paration inconnue: {method}")
        
        if repaired_mesh is None:
            return False, {"error": "√âchec de la r√©paration", "processing_time": time.time() - start_time}
        
        # Analyser le r√©sultat
        final_analysis = analyze_mesh_quality(repaired_mesh)
        
        # Copier les mat√©riaux si ils existent
        _copy_materials(input_path, output_path)
        
        # Sauvegarder
        repaired_mesh.export(output_path)
        
        # M√©tadonn√©es de r√©paration
        repair_metadata = {
            "success": True,
            "method": method,
            "processing_time": time.time() - start_time,
            "original_analysis": original_analysis,
            "final_analysis": final_analysis,
            "repair_info": repair_info,
            "improvements": {
                "watertight": not original_analysis["basic_stats"]["is_watertight"] and final_analysis["basic_stats"]["is_watertight"],
                "vertex_reduction": original_analysis["basic_stats"]["vertices"] - final_analysis["basic_stats"]["vertices"],
                "face_reduction": original_analysis["basic_stats"]["faces"] - final_analysis["basic_stats"]["faces"]
            }
        }
        
        logger.info(f"‚úÖ R√©paration termin√©e en {repair_metadata['processing_time']:.2f}s")
        return True, repair_metadata
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©paration: {e}")
        return False, {
            "error": str(e),
            "processing_time": time.time() - start_time
        }

def _repair_with_pymeshfix(mesh: trimesh.Trimesh, aggressive: bool) -> Tuple[Optional[trimesh.Trimesh], List[str]]:
    """R√©paration avec pymeshfix."""
    steps = []
    
    try:
        vertices = mesh.vertices
        faces = mesh.faces
        
        # Configuration pymeshfix
        meshfix = pymeshfix.MeshFix(vertices, faces)
        steps.append("Initialisation pymeshfix")
        
        if aggressive:
            meshfix.repair(verbose=False, joincomp=True, fillholes=True)
            steps.append("R√©paration agressive avec joincomp et fillholes")
        else:
            meshfix.repair(verbose=False)
            steps.append("R√©paration standard")
        
        repaired_mesh = trimesh.Trimesh(meshfix.v, meshfix.f)
        steps.append(f"Cr√©ation maillage r√©par√©: {len(meshfix.v)} vertices, {len(meshfix.f)} faces")
        
        return repaired_mesh, steps
        
    except Exception as e:
        steps.append(f"Erreur pymeshfix: {e}")
        return None, steps

def _repair_with_trimesh(
    mesh: trimesh.Trimesh, 
    aggressive: bool, 
    preserve_details: bool
) -> Tuple[Optional[trimesh.Trimesh], List[str]]:
    """R√©paration avec les outils trimesh."""
    steps = []
    result = mesh.copy()
    
    try:
        # √âtape 1: Nettoyage de base
        if aggressive or not preserve_details:
            result.remove_degenerate_faces()
            steps.append("Suppression faces d√©g√©n√©r√©es")
            
            result.remove_duplicate_faces()
            steps.append("Suppression faces dupliqu√©es")
            
            result.merge_vertices()
            steps.append("Fusion vertices proches")
        
        # √âtape 2: Correction de l'orientation
        if not result.is_winding_consistent:
            result.fix_normals()
            steps.append("Correction orientation des normales")
        
        # √âtape 3: Remplissage des trous (si agressif)
        if aggressive:
            try:
                result.fill_holes()
                steps.append("Remplissage des trous")
            except Exception as e:
                steps.append(f"√âchec remplissage trous: {e}")
        
        # √âtape 4: Convex hull si n√©cessaire (tr√®s agressif)
        if aggressive and not result.is_watertight:
            try:
                result = result.convex_hull
                steps.append("G√©n√©ration enveloppe convexe (fallback)")
            except Exception as e:
                steps.append(f"√âchec enveloppe convexe: {e}")
        
        # √âtape 5: Lissage l√©ger si pr√©servation des d√©tails
        if preserve_details and not aggressive:
            try:
                result = result.smoothed()
                steps.append("Lissage l√©ger")
            except Exception as e:
                steps.append(f"√âchec lissage: {e}")
        
        return result, steps
        
    except Exception as e:
        steps.append(f"Erreur r√©paration trimesh: {e}")
        return None, steps

def _copy_materials(input_path: str, output_path: str):
    """Copie les fichiers de mat√©riaux associ√©s."""
    try:
        input_path_obj = Path(input_path)
        output_path_obj = Path(output_path)
        
        # Fichier MTL
        mtl_input = input_path_obj.with_suffix('.mtl')
        if mtl_input.exists():
            mtl_output = output_path_obj.with_suffix('.mtl')
            shutil.copy2(mtl_input, mtl_output)
        
        # Textures dans le m√™me dossier
        texture_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tga', '.tiff']
        for ext in texture_extensions:
            for texture_file in input_path_obj.parent.glob(f"*{ext}"):
                if texture_file.is_file():
                    shutil.copy2(texture_file, output_path_obj.parent / texture_file.name)
                    
    except Exception as e:
        logger.warning(f"Erreur copie mat√©riaux: {e}")

def repair_mesh(input_path: str, output_path: str) -> bool:
    """Version legacy maintenue pour compatibilit√©."""
    success, _ = repair_mesh_advanced(input_path, output_path, method="auto")
    return success


def scale_mesh_advanced(
    input_path: str, 
    output_path: str, 
    target_size_mm: float,
    scaling_mode: str = "uniform",
    preserve_aspect: bool = True,
    center_mesh: bool = True
) -> Tuple[bool, Dict[str, Any]]:
    """
    Met √† l'√©chelle un maillage avec options avanc√©es.

    Args:
        input_path: Chemin vers le maillage d'entr√©e
        output_path: Chemin de sortie
        target_size_mm: Taille cible en millim√®tres
        scaling_mode: Mode de mise √† l'√©chelle ("uniform", "x", "y", "z", "volume")
        preserve_aspect: Pr√©server les proportions
        center_mesh: Centrer le maillage apr√®s mise √† l'√©chelle

    Returns:
        Tuple (succ√®s, m√©tadonn√©es de mise √† l'√©chelle)
    """
    start_time = time.time()
    
    if target_size_mm <= 1e-6:
        logger.info("üìè Mise √† l'√©chelle ignor√©e (taille cible = 0)")
        if input_path != output_path:
            shutil.copy2(input_path, output_path)
            _copy_materials(input_path, output_path)
        return True, {"skipped": True, "reason": "target_size_zero"}

    try:
        logger.info(f"üìè Mise √† l'√©chelle avanc√©e: {input_path} -> {target_size_mm}mm ({scaling_mode})")
        
        mesh = trimesh.load_mesh(input_path)
        original_bounds = mesh.bounding_box.extents
        original_volume = float(mesh.volume) if mesh.is_watertight else None
        original_center = mesh.centroid.copy()
        
        # Calculer le facteur d'√©chelle
        scale_factor = _calculate_scale_factor(mesh, target_size_mm, scaling_mode)
        
        if scale_factor <= 0:
            return False, {
                "error": "Facteur d'√©chelle invalide",
                "processing_time": time.time() - start_time
            }
        
        # Appliquer la mise √† l'√©chelle
        if scaling_mode == "uniform":
            mesh.apply_scale(scale_factor)
        elif scaling_mode in ["x", "y", "z"]:
            scale_vector = [1.0, 1.0, 1.0]
            axis_idx = {"x": 0, "y": 1, "z": 2}[scaling_mode]
            scale_vector[axis_idx] = scale_factor
            
            if preserve_aspect:
                # Mise √† l'√©chelle uniforme mais orientation sp√©cifique
                mesh.apply_scale(scale_factor)
            else:
                # Mise √† l'√©chelle non-uniforme
                transform = np.eye(4)
                transform[axis_idx, axis_idx] = scale_factor
                mesh.apply_transform(transform)
        
        elif scaling_mode == "volume":
            # Mise √† l'√©chelle bas√©e sur le volume
            if original_volume and original_volume > 0:
                volume_scale = (target_size_mm / original_volume) ** (1/3)
                mesh.apply_scale(volume_scale)
        
        # Centrer le maillage si demand√©
        if center_mesh:
            mesh.vertices -= mesh.centroid
        
        # Analyser le r√©sultat
        final_bounds = mesh.bounding_box.extents
        final_volume = float(mesh.volume) if mesh.is_watertight else None
        
        # Sauvegarder
        mesh.export(output_path)
        _copy_materials(input_path, output_path)
        
        # M√©tadonn√©es
        scaling_metadata = {
            "success": True,
            "scaling_mode": scaling_mode,
            "scale_factor": float(scale_factor),
            "preserve_aspect": preserve_aspect,
            "center_mesh": center_mesh,
            "processing_time": time.time() - start_time,
            "original_dimensions": original_bounds.tolist(),
            "final_dimensions": final_bounds.tolist(),
            "original_volume": original_volume,
            "final_volume": final_volume,
            "volume_change_ratio": final_volume / original_volume if original_volume and final_volume else None
        }
        
        logger.info(f"‚úÖ Mise √† l'√©chelle termin√©e: {original_bounds.max():.2f} -> {final_bounds.max():.2f}mm")
        return True, scaling_metadata
        
    except Exception as e:
        logger.error(f"‚ùå Erreur mise √† l'√©chelle: {e}")
        return False, {
            "error": str(e),
            "processing_time": time.time() - start_time
        }

def _calculate_scale_factor(mesh: trimesh.Trimesh, target_size: float, mode: str) -> float:
    """Calcule le facteur d'√©chelle selon le mode."""
    bounds = mesh.bounding_box.extents
    
    if mode == "uniform":
        return target_size / np.max(bounds)
    elif mode == "x":
        return target_size / bounds[0] if bounds[0] > 0 else 0
    elif mode == "y":
        return target_size / bounds[1] if bounds[1] > 0 else 0
    elif mode == "z":
        return target_size / bounds[2] if bounds[2] > 0 else 0
    elif mode == "volume":
        volume = float(mesh.volume) if mesh.is_watertight else 0
        return (target_size / volume) ** (1/3) if volume > 0 else 0
    else:
        return target_size / np.max(bounds)

def optimize_mesh(
    mesh: trimesh.Trimesh,
    target_faces: Optional[int] = None,
    edge_collapse_ratio: float = 0.5,
    preserve_boundaries: bool = True,
    preserve_uv: bool = True
) -> Tuple[trimesh.Trimesh, Dict[str, Any]]:
    """
    Optimise un maillage en r√©duisant le nombre de faces tout en pr√©servant la qualit√©.
    
    Args:
        mesh: Maillage √† optimiser
        target_faces: Nombre cible de faces (None = auto)
        edge_collapse_ratio: Ratio de r√©duction des ar√™tes
        preserve_boundaries: Pr√©server les contours
        preserve_uv: Pr√©server les coordonn√©es UV
        
    Returns:
        Tuple (maillage optimis√©, m√©tadonn√©es)
    """
    start_time = time.time()
    
    try:
        original_faces = len(mesh.faces)
        original_vertices = len(mesh.vertices)
        
        # D√©terminer le nombre cible de faces
        if target_faces is None:
            target_faces = max(100, int(original_faces * edge_collapse_ratio))
        
        target_faces = min(target_faces, original_faces)
        
        # Simplification avec trimesh
        try:
            # Utiliser la simplification quadric error metric si disponible
            simplified = mesh.simplify_quadric_decimation(target_faces)
            if simplified is None or len(simplified.faces) == 0:
                raise ValueError("Simplification quadrique √©chou√©e")
        except:
            # Fallback vers une m√©thode plus simple
            try:
                simplified = mesh.simplify_quadric_decimation(target_faces)
                if simplified is None:
                    # Derni√®re option: sous-√©chantillonnage
                    vertices, faces = _decimate_mesh_simple(mesh.vertices, mesh.faces, edge_collapse_ratio)
                    simplified = trimesh.Trimesh(vertices=vertices, faces=faces)
            except:
                simplified = mesh.copy()
        
        # Statistiques d'optimisation
        optimization_stats = {
            "success": True,
            "original_faces": original_faces,
            "original_vertices": original_vertices,
            "final_faces": len(simplified.faces),
            "final_vertices": len(simplified.vertices),
            "face_reduction_ratio": 1.0 - (len(simplified.faces) / original_faces),
            "vertex_reduction_ratio": 1.0 - (len(simplified.vertices) / original_vertices),
            "processing_time": time.time() - start_time
        }
        
        return simplified, optimization_stats
        
    except Exception as e:
        logger.error(f"Erreur optimisation maillage: {e}")
        return mesh, {
            "success": False,
            "error": str(e),
            "processing_time": time.time() - start_time
        }

def _decimate_mesh_simple(vertices: np.ndarray, faces: np.ndarray, ratio: float) -> Tuple[np.ndarray, np.ndarray]:
    """D√©cimation simple de maillage par sous-√©chantillonnage."""
    try:
        # Sous-√©chantillonnage des faces
        num_faces_keep = max(1, int(len(faces) * ratio))
        
        # S√©lection al√©atoire pond√©r√©e par l'aire des faces
        face_areas = []
        for face in faces:
            v1, v2, v3 = vertices[face]
            area = 0.5 * np.linalg.norm(np.cross(v2 - v1, v3 - v1))
            face_areas.append(area)
        
        face_areas = np.array(face_areas)
        probabilities = face_areas / face_areas.sum()
        
        selected_indices = np.random.choice(
            len(faces), 
            size=num_faces_keep, 
            replace=False, 
            p=probabilities
        )
        
        selected_faces = faces[selected_indices]
        
        # Nettoyer les vertices non utilis√©s
        used_vertices = np.unique(selected_faces.flatten())
        vertex_mapping = {old_idx: new_idx for new_idx, old_idx in enumerate(used_vertices)}
        
        new_vertices = vertices[used_vertices]
        new_faces = np.array([[vertex_mapping[v] for v in face] for face in selected_faces])
        
        return new_vertices, new_faces
        
    except Exception:
        # Fallback: retourner original
        return vertices, faces

def enhance_mesh_quality(
    mesh: trimesh.Trimesh,
    smooth_iterations: int = 1,
    fix_orientation: bool = True,
    remove_degenerate: bool = True,
    merge_close_vertices: bool = True
) -> Tuple[trimesh.Trimesh, Dict[str, Any]]:
    """
    Am√©liore la qualit√© g√©n√©rale d'un maillage.
    
    Args:
        mesh: Maillage √† am√©liorer
        smooth_iterations: Nombre d'it√©rations de lissage
        fix_orientation: Corriger l'orientation des faces
        remove_degenerate: Supprimer les faces d√©g√©n√©r√©es
        merge_close_vertices: Fusionner les vertices proches
        
    Returns:
        Tuple (maillage am√©lior√©, m√©tadonn√©es)
    """
    start_time = time.time()
    improvements = []
    result = mesh.copy()
    
    try:
        original_analysis = analyze_mesh_quality(mesh)
        
        # Nettoyage de base
        if remove_degenerate:
            original_faces = len(result.faces)
            result.remove_degenerate_faces()
            removed_faces = original_faces - len(result.faces)
            if removed_faces > 0:
                improvements.append(f"Supprim√© {removed_faces} faces d√©g√©n√©r√©es")
        
        if merge_close_vertices:
            original_vertices = len(result.vertices)
            result.merge_vertices()
            merged_vertices = original_vertices - len(result.vertices)
            if merged_vertices > 0:
                improvements.append(f"Fusionn√© {merged_vertices} vertices proches")
        
        # Correction d'orientation
        if fix_orientation and not result.is_winding_consistent:
            result.fix_normals()
            improvements.append("Corrig√© l'orientation des normales")
        
        # Lissage
        if smooth_iterations > 0:
            for i in range(smooth_iterations):
                try:
                    result = result.smoothed()
                    improvements.append(f"Lissage it√©ration {i+1}")
                except Exception as e:
                    improvements.append(f"√âchec lissage it√©ration {i+1}: {e}")
                    break
        
        final_analysis = analyze_mesh_quality(result)
        
        enhancement_stats = {
            "success": True,
            "improvements": improvements,
            "original_analysis": original_analysis,
            "final_analysis": final_analysis,
            "processing_time": time.time() - start_time
        }
        
        return result, enhancement_stats
        
    except Exception as e:
        logger.error(f"Erreur am√©lioration qualit√©: {e}")
        return mesh, {
            "success": False,
            "error": str(e),
            "improvements": improvements,
            "processing_time": time.time() - start_time
        }

def scale_mesh(input_path: str, output_path: str, target_size_mm: float) -> bool:
    """Version legacy maintenue pour compatibilit√©."""
    success, _ = scale_mesh_advanced(input_path, output_path, target_size_mm)
    return success


if __name__ == "__main__":
    # Create a dummy OBJ file for testing
    test_dir = "Examples/mesh_processor_test"
    os.makedirs(test_dir, exist_ok=True)

    # Unscaled and broken cube
    vertices = np.array(
        [
            [0, 0, 0],
            [10, 0, 0],
            [10, 10, 0],
            [0, 10, 0],
            [0, 0, 10],
            [10, 0, 10],
            [10, 10, 10],
            [0, 10, 10],
        ]
    )
    # Missing one face to make it broken
    faces = np.array(
        [
            [0, 1, 2],
            [0, 2, 3],  # bottom
            [4, 5, 6],
            [4, 6, 7],  # top
            [0, 1, 5],
            [0, 5, 4],  # front
            [2, 3, 7],
            [2, 7, 6],  # back
            [1, 2, 6],
            [1, 6, 5],  # right
            # left face is missing
        ]
    )

    broken_path = os.path.join(test_dir, "broken_cube.obj")
    mesh = trimesh.Trimesh(vertices=vertices, faces=faces)
    mesh.export(broken_path)

    print("\n--- Testing Mesh Repair ---")
    repaired_path = os.path.join(test_dir, "repaired_cube.obj")
    success = repair_mesh(broken_path, repaired_path)
    if success:
        print("‚úÖ Repair test successful.")
        # Verify it's watertight now
        repaired = trimesh.load_mesh(repaired_path)
        print(f"Is repaired mesh watertight? {repaired.is_watertight}")
    else:
        print("‚ùå Repair test failed.")

    print("\n--- Testing Mesh Scaling ---")
    scaled_path = os.path.join(test_dir, "scaled_cube.obj")
    # Use the repaired path as input for scaling
    success = scale_mesh(repaired_path, scaled_path, target_size_mm=150.0)
    if success:
        print("‚úÖ Scaling test successful.")
        # Verify the new size
        scaled = trimesh.load_mesh(scaled_path)
        max_extent = np.max(scaled.bounding_box.extents)
        print(f"New longest dimension: {max_extent:.2f}mm (Target: 150.0mm)")
    else:
        print("‚ùå Scaling test failed.")

    print("\n--- Testing Zero Scaling ---")
    zero_scaled_path = os.path.join(test_dir, "zero_scaled_cube.obj")
    success = scale_mesh(scaled_path, zero_scaled_path, target_size_mm=0)
    if success and os.path.exists(zero_scaled_path):
        print("‚úÖ Zero scaling test successful (file was moved).")
    else:
        print("‚ùå Zero scaling test failed.")
