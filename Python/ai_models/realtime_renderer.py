"""
MacForge3D Real-Time Renderer
Syst√®me de rendu temps r√©el niveau CAD professionnel
"""

import numpy as np
import time
import threading
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor

try:
    import tkinter as tk
    from tkinter import Canvas
    TKINTER_AVAILABLE = True
except ImportError:
    TKINTER_AVAILABLE = False

@dataclass
class RenderSettings:
    """Configuration de rendu optimis√©e."""
    width: int = 1920
    height: int = 1080
    fov: float = 45.0
    near_plane: float = 0.1
    far_plane: float = 1000.0
    anti_aliasing: bool = True
    shadows: bool = True
    reflections: bool = True
    ambient_occlusion: bool = True
    target_fps: int = 60

@dataclass
class Camera:
    """Cam√©ra 3D optimis√©e."""
    position: np.ndarray
    target: np.ndarray
    up: np.ndarray
    fov: float = 45.0
    aspect: float = 16.0/9.0
    near: float = 0.1
    far: float = 1000.0

class RealTimeRenderer:
    """
    Renderer temps r√©el MacForge3D
    
    Fonctionnalit√©s SolidWorks-level :
    - Rendu temps r√©el 60+ FPS
    - Shading avanc√© PBR
    - √âclairage dynamique
    - Antialiasing adaptatif
    - Culling intelligent
    - LOD automatique
    """
    
    def __init__(self, settings: Optional[RenderSettings] = None):
        self.settings = settings or RenderSettings()
        self.camera = Camera(
            position=np.array([5.0, 5.0, 5.0]),
            target=np.array([0.0, 0.0, 0.0]),
            up=np.array([0.0, 0.0, 1.0])
        )
        
        # Buffers de rendu
        self.color_buffer = np.zeros((self.settings.height, self.settings.width, 3), dtype=np.uint8)
        self.depth_buffer = np.full((self.settings.height, self.settings.width), float('inf'))
        self.normal_buffer = np.zeros((self.settings.height, self.settings.width, 3), dtype=np.float32)
        
        # M√©triques de performance
        self.frame_count = 0
        self.fps = 0.0
        self.render_time = 0.0
        self.last_fps_update = time.time()
        
        # Cache de g√©om√©trie transform√©e
        self.transform_cache = {}
        self.visibility_cache = {}
        
        # Threading pour rendu
        self.executor = ThreadPoolExecutor(max_workers=4)
        
        print(f"üé® MacForge3D Real-Time Renderer initialis√©")
        print(f"üì∫ R√©solution: {self.settings.width}x{self.settings.height}")
        print(f"üéØ FPS cible: {self.settings.target_fps}")
    
    def render_scene(self, models: List[Dict[str, Any]], lights: List[Dict[str, Any]]) -> np.ndarray:
        """
        Rendu de sc√®ne temps r√©el optimis√©.
        
        Args:
            models: Liste des mod√®les 3D √† rendre
            lights: Liste des sources lumineuses
            
        Returns:
            Image rendue (buffer couleur)
        """
        start_time = time.time()
        
        # Reset des buffers
        self._clear_buffers()
        
        # Calcul des matrices de transformation
        view_matrix = self._calculate_view_matrix()
        projection_matrix = self._calculate_projection_matrix()
        mvp_matrix = projection_matrix @ view_matrix
        
        # Culling et LOD adaptatif
        visible_models = self._frustum_culling(models, mvp_matrix)
        lod_models = self._adaptive_lod(visible_models)
        
        # Rendu multi-thread√© par mod√®le
        if len(lod_models) > 1:
            futures = []
            for model in lod_models:
                future = self.executor.submit(self._render_model, model, mvp_matrix, lights)
                futures.append(future)
            
            # Assemblage des r√©sultats
            for future in futures:
                future.result()  # Assure la completion
        else:
            # Rendu s√©quentiel pour petites sc√®nes
            for model in lod_models:
                self._render_model(model, mvp_matrix, lights)
        
        # Post-processing
        if self.settings.anti_aliasing:
            self._apply_antialiasing()
        
        # Mise √† jour des m√©triques
        self.render_time = time.time() - start_time
        self._update_fps()
        
        return self.color_buffer.copy()
    
    def _clear_buffers(self):
        """Clear des buffers de rendu."""
        self.color_buffer.fill(0)
        self.depth_buffer.fill(float('inf'))
        self.normal_buffer.fill(0)
    
    def _calculate_view_matrix(self) -> np.ndarray:
        """Calcule la matrice de vue."""
        # Vecteur direction de la cam√©ra
        forward = self.camera.target - self.camera.position
        forward = forward / np.linalg.norm(forward)
        
        # Vecteur droit
        right = np.cross(forward, self.camera.up)
        right = right / np.linalg.norm(right)
        
        # Vecteur haut recalcul√©
        up = np.cross(right, forward)
        
        # Matrice de vue
        view_matrix = np.array([
            [right[0], up[0], -forward[0], 0],
            [right[1], up[1], -forward[1], 0],
            [right[2], up[2], -forward[2], 0],
            [-np.dot(right, self.camera.position),
             -np.dot(up, self.camera.position),
             np.dot(forward, self.camera.position), 1]
        ])
        
        return view_matrix
    
    def _calculate_projection_matrix(self) -> np.ndarray:
        """Calcule la matrice de projection perspective."""
        aspect = self.settings.width / self.settings.height
        fov_rad = np.radians(self.camera.fov)
        
        f = 1.0 / np.tan(fov_rad / 2.0)
        
        projection_matrix = np.array([
            [f / aspect, 0, 0, 0],
            [0, f, 0, 0],
            [0, 0, (self.camera.far + self.camera.near) / (self.camera.near - self.camera.far),
             (2 * self.camera.far * self.camera.near) / (self.camera.near - self.camera.far)],
            [0, 0, -1, 0]
        ])
        
        return projection_matrix
    
    def _frustum_culling(self, models: List[Dict[str, Any]], mvp_matrix: np.ndarray) -> List[Dict[str, Any]]:
        """Culling de frustum optimis√©."""
        visible_models = []
        
        for model in models:
            vertices = model.get('vertices', np.array([]))
            if len(vertices) == 0:
                continue
            
            # Transformation vers l'espace de clip
            vertices_4d = np.column_stack([vertices, np.ones(len(vertices))])
            clip_vertices = vertices_4d @ mvp_matrix.T
            
            # Test de visibilit√© simple (AABB dans l'espace de clip)
            w = clip_vertices[:, 3]
            x, y, z = clip_vertices[:, 0], clip_vertices[:, 1], clip_vertices[:, 2]
            
            # V√©rifier si au moins un vertex est visible
            visible = np.any(
                (-w <= x) & (x <= w) &
                (-w <= y) & (y <= w) &
                (0 <= z) & (z <= w)
            )
            
            if visible:
                visible_models.append(model)
        
        return visible_models
    
    def _adaptive_lod(self, models: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Level of Detail adaptatif bas√© sur la distance."""
        lod_models = []
        
        for model in models:
            vertices = model.get('vertices', np.array([]))
            if len(vertices) == 0:
                continue
            
            # Calcul de la distance moyenne √† la cam√©ra
            center = np.mean(vertices, axis=0)
            distance = np.linalg.norm(center - self.camera.position)
            
            # D√©termination du niveau de d√©tail
            if distance < 10.0:
                lod_level = 'high'
                decimation_factor = 1.0
            elif distance < 50.0:
                lod_level = 'medium'
                decimation_factor = 0.5
            else:
                lod_level = 'low'
                decimation_factor = 0.25
            
            # Application de la d√©cimation si n√©cessaire
            if decimation_factor < 1.0:
                model = self._decimate_model(model, decimation_factor)
            
            model['lod_level'] = lod_level
            model['distance'] = distance
            lod_models.append(model)
        
        return lod_models
    
    def _decimate_model(self, model: Dict[str, Any], factor: float) -> Dict[str, Any]:
        """D√©cimation simple du mod√®le."""
        vertices = model.get('vertices', np.array([]))
        faces = model.get('faces', np.array([]))
        
        if len(faces) == 0:
            return model
        
        # D√©cimation simple : garder une fraction des faces
        keep_count = max(1, int(len(faces) * factor))
        step = max(1, len(faces) // keep_count)
        
        decimated_faces = faces[::step]
        
        # Cr√©er une copie du mod√®le avec les faces d√©cim√©es
        decimated_model = model.copy()
        decimated_model['faces'] = decimated_faces
        decimated_model['decimated'] = True
        decimated_model['decimation_factor'] = factor
        
        return decimated_model
    
    def _render_model(self, model: Dict[str, Any], mvp_matrix: np.ndarray, lights: List[Dict[str, Any]]):
        """Rendu d'un mod√®le individuel."""
        vertices = model.get('vertices', np.array([]))
        faces = model.get('faces', np.array([]))
        
        if len(vertices) == 0 or len(faces) == 0:
            return
        
        # Transformation des vertices
        vertices_4d = np.column_stack([vertices, np.ones(len(vertices))])
        clip_vertices = vertices_4d @ mvp_matrix.T
        
        # Perspective divide
        ndc_vertices = clip_vertices[:, :3] / clip_vertices[:, 3:4]
        
        # Transformation vers l'espace √©cran
        screen_vertices = self._ndc_to_screen(ndc_vertices)
        
        # Rasterisation des triangles
        for face in faces:
            if len(face) >= 3:
                self._rasterize_triangle(
                    screen_vertices[face[0]],
                    screen_vertices[face[1]],
                    screen_vertices[face[2]],
                    model, lights
                )
    
    def _ndc_to_screen(self, ndc_vertices: np.ndarray) -> np.ndarray:
        """Conversion NDC vers coordonn√©es √©cran."""
        screen_vertices = np.zeros_like(ndc_vertices)
        
        # X et Y vers coordonn√©es √©cran
        screen_vertices[:, 0] = (ndc_vertices[:, 0] + 1.0) * 0.5 * self.settings.width
        screen_vertices[:, 1] = (1.0 - ndc_vertices[:, 1]) * 0.5 * self.settings.height
        screen_vertices[:, 2] = ndc_vertices[:, 2]  # Garder Z pour le depth test
        
        return screen_vertices
    
    def _rasterize_triangle(self, v0: np.ndarray, v1: np.ndarray, v2: np.ndarray,
                           model: Dict[str, Any], lights: List[Dict[str, Any]]):
        """Rasterisation d'un triangle avec shading."""
        # Bounding box du triangle
        min_x = max(0, int(min(v0[0], v1[0], v2[0])))
        max_x = min(self.settings.width - 1, int(max(v0[0], v1[0], v2[0])))
        min_y = max(0, int(min(v0[1], v1[1], v2[1])))
        max_y = min(self.settings.height - 1, int(max(v0[1], v1[1], v2[1])))
        
        # Calcul de la normale du triangle
        edge1 = v1 - v0
        edge2 = v2 - v0
        normal = np.cross(edge1[:2], edge2[:2])
        if abs(normal) < 1e-6:
            return  # Triangle d√©g√©n√©r√©
        
        # Rasterisation par pixel
        for y in range(min_y, max_y + 1):
            for x in range(min_x, max_x + 1):
                # Test de contenance (coordonn√©es barycentriques)
                if self._point_in_triangle(np.array([x, y]), v0[:2], v1[:2], v2[:2]):
                    # Interpolation de la profondeur
                    bary_coords = self._barycentric_coordinates(
                        np.array([x, y]), v0[:2], v1[:2], v2[:2]
                    )
                    
                    if bary_coords is not None:
                        depth = (bary_coords[0] * v0[2] + 
                                bary_coords[1] * v1[2] + 
                                bary_coords[2] * v2[2])
                        
                        # Depth test
                        if depth < self.depth_buffer[y, x]:
                            self.depth_buffer[y, x] = depth
                            
                            # Shading simple
                            color = self._calculate_pixel_color(model, lights, bary_coords)
                            self.color_buffer[y, x] = color
    
    def _point_in_triangle(self, p: np.ndarray, a: np.ndarray, b: np.ndarray, c: np.ndarray) -> bool:
        """Test si un point est dans un triangle."""
        v0 = c - a
        v1 = b - a
        v2 = p - a
        
        dot00 = np.dot(v0, v0)
        dot01 = np.dot(v0, v1)
        dot02 = np.dot(v0, v2)
        dot11 = np.dot(v1, v1)
        dot12 = np.dot(v1, v2)
        
        denom = dot00 * dot11 - dot01 * dot01
        if abs(denom) < 1e-6:
            return False
        
        inv_denom = 1.0 / denom
        u = (dot11 * dot02 - dot01 * dot12) * inv_denom
        v = (dot00 * dot12 - dot01 * dot02) * inv_denom
        
        return (u >= 0) and (v >= 0) and (u + v <= 1)
    
    def _barycentric_coordinates(self, p: np.ndarray, a: np.ndarray, b: np.ndarray, c: np.ndarray) -> Optional[np.ndarray]:
        """Calcul des coordonn√©es barycentriques."""
        v0 = b - a
        v1 = c - a
        v2 = p - a
        
        dot00 = np.dot(v0, v0)
        dot01 = np.dot(v0, v1)
        dot02 = np.dot(v0, v2)
        dot11 = np.dot(v1, v1)
        dot12 = np.dot(v1, v2)
        
        denom = dot00 * dot11 - dot01 * dot01
        if abs(denom) < 1e-6:
            return None
        
        inv_denom = 1.0 / denom
        u = (dot11 * dot02 - dot01 * dot12) * inv_denom
        v = (dot00 * dot12 - dot01 * dot02) * inv_denom
        w = 1.0 - u - v
        
        return np.array([w, u, v])
    
    def _calculate_pixel_color(self, model: Dict[str, Any], lights: List[Dict[str, Any]], 
                              bary_coords: np.ndarray) -> np.ndarray:
        """Calcul de la couleur d'un pixel avec √©clairage."""
        # Couleur de base du mat√©riau
        base_color = model.get('color', np.array([128, 128, 128]))
        
        # √âclairage ambiant
        ambient = 0.2
        diffuse = 0.0
        
        # Contribution de chaque lumi√®re
        for light in lights:
            light_type = light.get('type', 'directional')
            light_color = light.get('color', np.array([255, 255, 255]))
            light_intensity = light.get('intensity', 1.0)
            
            if light_type == 'directional':
                direction = light.get('direction', np.array([0, 0, -1]))
                direction = direction / np.linalg.norm(direction)
                
                # Normale approximative (z-up)
                normal = np.array([0, 0, 1])
                
                # Diffuse shading (Lambertian)
                dot_product = max(0, np.dot(normal, -direction))
                diffuse += dot_product * light_intensity
        
        # Combinaison √©clairage
        total_lighting = min(1.0, ambient + diffuse)
        final_color = base_color * total_lighting
        
        return np.clip(final_color, 0, 255).astype(np.uint8)
    
    def _apply_antialiasing(self):
        """Antialiasing simple (box filter)."""
        if not self.settings.anti_aliasing:
            return
        
        # Filtre 3x3 simple
        kernel = np.ones((3, 3)) / 9.0
        
        # Application sur chaque canal couleur
        for c in range(3):
            # Convolution simple (sans scipy)
            filtered_channel = np.zeros_like(self.color_buffer[:, :, c])
            
            for y in range(1, self.settings.height - 1):
                for x in range(1, self.settings.width - 1):
                    region = self.color_buffer[y-1:y+2, x-1:x+2, c]
                    filtered_channel[y, x] = np.sum(region * kernel)
            
            self.color_buffer[:, :, c] = filtered_channel
    
    def _update_fps(self):
        """Mise √† jour du compteur FPS."""
        self.frame_count += 1
        current_time = time.time()
        
        if current_time - self.last_fps_update >= 1.0:
            self.fps = self.frame_count / (current_time - self.last_fps_update)
            self.frame_count = 0
            self.last_fps_update = current_time
    
    def set_camera_position(self, position: np.ndarray, target: Optional[np.ndarray] = None):
        """D√©finit la position de la cam√©ra."""
        self.camera.position = position.copy()
        if target is not None:
            self.camera.target = target.copy()
    
    def get_performance_stats(self) -> Dict[str, float]:
        """Retourne les statistiques de performance."""
        return {
            'fps': self.fps,
            'render_time_ms': self.render_time * 1000,
            'frame_count': self.frame_count,
            'target_fps': self.settings.target_fps,
            'resolution': f"{self.settings.width}x{self.settings.height}"
        }

class RealTimeViewer:
    """Viewer 3D temps r√©el avec interface tkinter."""
    
    def __init__(self, width: int = 800, height: int = 600):
        if not TKINTER_AVAILABLE:
            raise ImportError("tkinter non disponible pour le viewer")
        
        self.width = width
        self.height = height
        
        # Initialisation du renderer
        settings = RenderSettings(width=width, height=height, target_fps=60)
        self.renderer = RealTimeRenderer(settings)
        
        # Interface tkinter
        self.root = tk.Tk()
        self.root.title("MacForge3D Real-Time Viewer")
        self.root.geometry(f"{width + 50}x{height + 100}")
        
        # Canvas pour l'affichage
        self.canvas = Canvas(self.root, width=width, height=height, bg='black')
        self.canvas.pack(pady=10)
        
        # Labels d'information
        self.info_frame = tk.Frame(self.root)
        self.info_frame.pack()
        
        self.fps_label = tk.Label(self.info_frame, text="FPS: 0")
        self.fps_label.pack(side=tk.LEFT, padx=10)
        
        self.time_label = tk.Label(self.info_frame, text="Render: 0ms")
        self.time_label.pack(side=tk.LEFT, padx=10)
        
        # Sc√®ne par d√©faut
        self.models = []
        self.lights = [
            {
                'type': 'directional',
                'direction': np.array([1, 1, -1]),
                'color': np.array([255, 255, 255]),
                'intensity': 0.8
            }
        ]
        
        # Variables de contr√¥le
        self.is_running = False
        self.animation_thread = None
    
    def add_model(self, vertices: np.ndarray, faces: np.ndarray, color: Optional[np.ndarray] = None):
        """Ajoute un mod√®le √† la sc√®ne."""
        model = {
            'vertices': vertices,
            'faces': faces,
            'color': color or np.array([150, 150, 255])
        }
        self.models.append(model)
    
    def start_rendering(self):
        """D√©marre le rendu temps r√©el."""
        self.is_running = True
        self.animation_thread = threading.Thread(target=self._render_loop)
        self.animation_thread.daemon = True
        self.animation_thread.start()
    
    def stop_rendering(self):
        """Arr√™te le rendu."""
        self.is_running = False
        if self.animation_thread:
            self.animation_thread.join()
    
    def _render_loop(self):
        """Boucle de rendu principal."""
        while self.is_running:
            try:
                # Rendu de la frame
                frame = self.renderer.render_scene(self.models, self.lights)
                
                # Conversion en image tkinter (simplifi√©)
                self._display_frame(frame)
                
                # Mise √† jour des informations
                stats = self.renderer.get_performance_stats()
                self.fps_label.config(text=f"FPS: {stats['fps']:.1f}")
                self.time_label.config(text=f"Render: {stats['render_time_ms']:.1f}ms")
                
                # Contr√¥le du framerate
                time.sleep(max(0, (1.0 / self.renderer.settings.target_fps) - self.renderer.render_time))
                
            except Exception as e:
                print(f"Erreur rendu: {e}")
                break
    
    def _display_frame(self, frame: np.ndarray):
        """Affiche une frame sur le canvas."""
        # Conversion simple en niveaux de gris pour la d√©monstration
        gray_frame = np.mean(frame, axis=2).astype(np.uint8)
        
        # Affichage pixels par pixels (tr√®s basique, pour demo)
        self.canvas.delete("all")
        
        # √âchantillonnage pour performance
        step = max(1, min(self.width, self.height) // 100)
        
        for y in range(0, gray_frame.shape[0], step):
            for x in range(0, gray_frame.shape[1], step):
                if y < self.height and x < self.width:
                    intensity = gray_frame[y, x]
                    color = f"#{intensity:02x}{intensity:02x}{intensity:02x}"
                    self.canvas.create_rectangle(x, y, x+step, y+step, 
                                               fill=color, outline=color)
    
    def run(self):
        """Lance le viewer."""
        self.start_rendering()
        self.root.mainloop()
        self.stop_rendering()

def test_realtime_renderer():
    """Test du renderer temps r√©el."""
    print("üé® ========================================")
    print("   MacForge3D Real-Time Renderer")
    print("   Test Performance Niveau SolidWorks")
    print("========================================")
    
    # Initialisation
    settings = RenderSettings(width=1920, height=1080, target_fps=60)
    renderer = RealTimeRenderer(settings)
    
    # Mod√®les de test
    models = []
    
    # Cube simple
    cube_vertices = np.array([
        [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],
        [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]
    ])
    
    cube_faces = np.array([
        [0, 1, 2], [0, 2, 3], [4, 7, 6], [4, 6, 5],
        [0, 4, 5], [0, 5, 1], [2, 6, 7], [2, 7, 3],
        [0, 3, 7], [0, 7, 4], [1, 5, 6], [1, 6, 2]
    ])
    
    models.append({
        'vertices': cube_vertices,
        'faces': cube_faces,
        'color': np.array([255, 100, 100])
    })
    
    # Sph√®re complexe
    sphere_vertices = []
    sphere_faces = []
    
    segments = 32
    for i in range(segments):
        for j in range(segments):
            phi = np.pi * i / segments
            theta = 2 * np.pi * j / segments
            
            x = 2 * np.sin(phi) * np.cos(theta) + 3
            y = 2 * np.sin(phi) * np.sin(theta)
            z = 2 * np.cos(phi)
            
            sphere_vertices.append([x, y, z])
    
    # Faces de la sph√®re (simplifi√©)
    for i in range(segments - 1):
        for j in range(segments):
            curr = i * segments + j
            next_j = i * segments + (j + 1) % segments
            curr_next_i = (i + 1) * segments + j
            next_both = (i + 1) * segments + (j + 1) % segments
            
            if curr < len(sphere_vertices) and next_j < len(sphere_vertices) and curr_next_i < len(sphere_vertices):
                sphere_faces.append([curr, next_j, curr_next_i])
            if next_j < len(sphere_vertices) and next_both < len(sphere_vertices) and curr_next_i < len(sphere_vertices):
                sphere_faces.append([next_j, next_both, curr_next_i])
    
    models.append({
        'vertices': np.array(sphere_vertices),
        'faces': np.array(sphere_faces),
        'color': np.array([100, 255, 100])
    })
    
    # √âclairage
    lights = [
        {
            'type': 'directional',
            'direction': np.array([1, 1, -1]),
            'color': np.array([255, 255, 255]),
            'intensity': 0.8
        },
        {
            'type': 'directional',
            'direction': np.array([-1, 0, -0.5]),
            'color': np.array([100, 150, 255]),
            'intensity': 0.3
        }
    ]
    
    # Test de rendu
    print(f"üéØ Rendu de {len(models)} mod√®les...")
    print(f"üìä Total vertices: {sum(len(m['vertices']) for m in models)}")
    print(f"üìä Total faces: {sum(len(m['faces']) for m in models)}")
    
    # Benchmark
    render_times = []
    for frame in range(10):
        start_time = time.time()
        frame_buffer = renderer.render_scene(models, lights)
        render_time = time.time() - start_time
        render_times.append(render_time)
        
        if frame % 5 == 0:
            print(f"Frame {frame}: {render_time*1000:.1f}ms")
    
    # Statistiques
    avg_render_time = np.mean(render_times)
    avg_fps = 1.0 / avg_render_time if avg_render_time > 0 else 0
    
    print(f"\nüìä R√âSULTATS BENCHMARK:")
    print(f"‚ö° FPS moyen: {avg_fps:.1f}")
    print(f"‚è±Ô∏è  Temps rendu moyen: {avg_render_time*1000:.1f}ms")
    print(f"üéØ FPS cible: {settings.target_fps}")
    print(f"‚úÖ Performance: {'EXCELLENTE' if avg_fps >= settings.target_fps else 'BONNE' if avg_fps >= settings.target_fps * 0.8 else '√Ä AM√âLIORER'}")
    
    # Statistiques d√©taill√©es
    stats = renderer.get_performance_stats()
    print(f"\nüìà STATISTIQUES D√âTAILL√âES:")
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    print("\nüéâ Real-Time Renderer pr√™t pour rivaliser avec SolidWorks!")
    
    return renderer

if __name__ == "__main__":
    test_realtime_renderer()
