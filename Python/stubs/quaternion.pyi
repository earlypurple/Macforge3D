"""
Stub typings for numpy-quaternion
"""

import numpy as np
from typing import Dict, Any, List, Optional, Union, Tuple, overload

class quaternion:
    def __init__(self, w: float = 0.0, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None: ...
    def __mul__(self, other: Union["quaternion", float]) -> "quaternion": ...
    def __rmul__(self, other: Union["quaternion", float]) -> "quaternion": ...
    def __truediv__(self, other: Union["quaternion", float]) -> "quaternion": ...
    def __add__(self, other: "quaternion") -> "quaternion": ...
    def __sub__(self, other: "quaternion") -> "quaternion": ...
    def __neg__(self) -> "quaternion": ...
    def __abs__(self) -> float: ...
    def conjugate(self) -> "quaternion": ...
    def inverse(self) -> "quaternion": ...
    def exp(self) -> "quaternion": ...
    def log(self) -> "quaternion": ...
    def normalized(self) -> "quaternion": ...
    @property
    def w(self) -> float: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    @property
    def components(self) -> np.ndarray: ...

def from_rotation_matrix(matrix: np.ndarray) -> quaternion: ...
def from_rotation_vector(vector: np.ndarray) -> quaternion: ...
def from_spherical_coords(vartheta: float, varphi: float) -> quaternion: ...
def from_euler_angles(alpha: float, beta: float, gamma: float) -> quaternion: ...
def rotate_vector(vector: np.ndarray, quat: quaternion) -> np.ndarray: ...
def slerp(q1: quaternion, q2: quaternion, t: float) -> quaternion: ...
