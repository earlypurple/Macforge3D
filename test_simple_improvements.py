#!/usr/bin/env python3
"""
Test simple des am√©liorations apport√©es √† MacForge3D.
"""

import sys
import os
import logging

# Ajouter le r√©pertoire Python au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Python'))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_basic_imports():
    """Test des importations de base."""
    logger.info("=== Test des importations ===")
    
    try:
        # Test des modules am√©lior√©s
        from ai_models.performance_optimizer import PerformanceOptimizer
        from core.advanced_cache_optimizer import AdvancedCacheOptimizer
        from core.global_performance_orchestrator import GlobalPerformanceOrchestrator
        from ai_models.text_effects import TextEffects
        
        logger.info("‚úÖ Tous les modules import√©s avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur d'importation: {e}")
        return False

def test_performance_optimizer_basic():
    """Test basique de l'optimiseur de performance."""
    logger.info("=== Test Performance Optimizer ===")
    
    try:
        from ai_models.performance_optimizer import PerformanceOptimizer
        
        # Cr√©er l'optimiseur
        optimizer = PerformanceOptimizer()
        logger.info("‚úÖ PerformanceOptimizer cr√©√© avec succ√®s")
        
        # Tester la m√©thode de simplification adaptative (sans maillage r√©el)
        result = hasattr(optimizer, '_apply_adaptive_simplification')
        assert result, "M√©thode _apply_adaptive_simplification manquante"
        logger.info("‚úÖ M√©thode de simplification adaptative pr√©sente")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Performance Optimizer: {e}")
        return False

def test_cache_optimizer_basic():
    """Test basique de l'optimiseur de cache."""
    logger.info("=== Test Cache Optimizer ===")
    
    try:
        from core.advanced_cache_optimizer import AdvancedCacheOptimizer
        
        # Cr√©er l'optimiseur
        cache = AdvancedCacheOptimizer(max_memory_mb=50)
        logger.info("‚úÖ AdvancedCacheOptimizer cr√©√© avec succ√®s")
        
        # Tester les nouvelles m√©thodes
        assert hasattr(cache._access_predictor, 'predict_future_access'), "M√©thode predict_future_access manquante"
        logger.info("‚úÖ Pr√©diction d'acc√®s futur impl√©ment√©e")
        
        # Test simple de fonctionnement
        cache.put("test_key", "test_data")
        data = cache.get("test_key")
        assert data == "test_data", "Cache ne fonctionne pas correctement"
        logger.info("‚úÖ Cache fonctionne correctement")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Cache Optimizer: {e}")
        return False

def test_global_orchestrator_basic():
    """Test basique de l'orchestrateur global."""
    logger.info("=== Test Global Orchestrator ===")
    
    try:
        from core.global_performance_orchestrator import GlobalPerformanceOrchestrator
        
        # Cr√©er l'orchestrateur
        orchestrator = GlobalPerformanceOrchestrator()
        logger.info("‚úÖ GlobalPerformanceOrchestrator cr√©√© avec succ√®s")
        
        # Tester les nouvelles m√©thodes
        assert hasattr(orchestrator, '_collect_system_metrics'), "M√©thode _collect_system_metrics manquante"
        assert hasattr(orchestrator, '_determine_optimization_sequence'), "M√©thode _determine_optimization_sequence manquante"
        logger.info("‚úÖ Nouvelles m√©thodes d'orchestration pr√©sentes")
        
        # Tester la collecte de m√©triques
        metrics = orchestrator._collect_system_metrics()
        assert 'cpu_usage' in metrics, "M√©triques CPU manquantes"
        assert 'memory_usage' in metrics, "M√©triques m√©moire manquantes"
        logger.info("‚úÖ Collecte de m√©triques fonctionne")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Global Orchestrator: {e}")
        return False

def test_text_effects_basic():
    """Test basique des effets de texte."""
    logger.info("=== Test Text Effects ===")
    
    try:
        from ai_models.text_effects import TextEffects
        
        # Cr√©er le gestionnaire d'effets
        effects = TextEffects()
        logger.info("‚úÖ TextEffects cr√©√© avec succ√®s")
        
        # Tester les nouvelles m√©thodes
        assert hasattr(effects, '_detect_high_curvature_vertices'), "M√©thode _detect_high_curvature_vertices manquante"
        assert hasattr(effects, '_build_vertex_connectivity'), "M√©thode _build_vertex_connectivity manquante"
        logger.info("‚úÖ Nouvelles m√©thodes de lissage pr√©sentes")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur Text Effects: {e}")
        return False

def main():
    """Fonction principale de test."""
    logger.info("üöÄ Test simple des am√©liorations MacForge3D")
    logger.info("=" * 50)
    
    tests = [
        test_basic_imports,
        test_performance_optimizer_basic,
        test_cache_optimizer_basic,
        test_global_orchestrator_basic,
        test_text_effects_basic
    ]
    
    results = {}
    passed = 0
    
    for test_func in tests:
        test_name = test_func.__name__.replace('test_', '').replace('_basic', '')
        logger.info(f"\nüìã Test: {test_name}")
        
        try:
            result = test_func()
            results[test_name] = result
            if result:
                passed += 1
        except Exception as e:
            logger.error(f"‚ùå Erreur critique: {e}")
            results[test_name] = False
    
    # Rapport final
    logger.info("\n" + "=" * 50)
    logger.info("üìä RAPPORT FINAL")
    logger.info("=" * 50)
    
    for test_name, result in results.items():
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name:<25} : {status}")
    
    success_rate = (passed / len(tests)) * 100
    logger.info(f"\nüéØ Taux de r√©ussite: {passed}/{len(tests)} ({success_rate:.1f}%)")
    
    if success_rate == 100:
        logger.info("üéâ Tous les tests r√©ussis! Les am√©liorations sont fonctionnelles.")
        return 0
    elif success_rate >= 80:
        logger.info("‚úÖ La plupart des am√©liorations fonctionnent correctement.")
        return 0
    else:
        logger.info("‚ö†Ô∏è  Certaines am√©liorations n√©cessitent une r√©vision.")
        return 1

if __name__ == "__main__":
    sys.exit(main())