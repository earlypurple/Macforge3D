#!/usr/bin/env python3
"""
MacForge3D Professional GUI - Interface 3D Compl√®te
Interface utilisateur professionnelle comme Blender pour MacForge3D
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import numpy as np
import trimesh
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from mpl_toolkits.mplot3d import Axes3D
import threading
import time
import os
import sys
from typing import Dict, Any, Optional, List

# Ajouter le chemin Python pour les modules MacForge3D
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Python'))

try:
    from ai_models.ultra_performance_engine import UltraPerformanceEngine
    from ai_models.realtime_renderer import RealtimeRenderer
except ImportError:
    print("‚ö†Ô∏è Modules ultra-performance non trouv√©s, utilisation du mode de base")
    UltraPerformanceEngine = None
    RealtimeRenderer = None

class MacForge3DProfessionalGUI:
    """Interface GUI professionnelle pour MacForge3D - Style Blender."""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üöÄ MacForge3D Professional - Interface 3D Compl√®te")
        self.root.geometry("1400x900")
        self.root.configure(bg='#2b2b2b')
        
        # Variables d'√©tat
        self.current_mesh = None
        self.engine = UltraPerformanceEngine() if UltraPerformanceEngine else None
        self.renderer = RealtimeRenderer() if RealtimeRenderer else None
        self.is_rendering = False
        self.viewport_mode = "solid"
        
        # Historique des op√©rations
        self.operation_history = []
        self.undo_stack = []
        
        # Configuration du style
        self.setup_style()
        
        # Interface utilisateur
        self.setup_ui()
        
        # Raccourcis clavier
        self.setup_shortcuts()
        
        # D√©marrage
        self.show_startup_message()
    
    def setup_style(self):
        """Configure le style professionnel de l'interface."""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Couleurs professionnelles
        style.configure('Professional.TFrame', background='#2b2b2b')
        style.configure('Professional.TLabel', background='#2b2b2b', foreground='#ffffff')
        style.configure('Professional.TButton', background='#404040', foreground='#ffffff')
        style.configure('Professional.TEntry', background='#404040', foreground='#ffffff')
        style.configure('Professional.TNotebook', background='#2b2b2b')
        style.configure('Professional.TNotebook.Tab', background='#404040', foreground='#ffffff')
    
    def setup_ui(self):
        """Configure l'interface utilisateur compl√®te."""
        
        # === MENU PRINCIPAL ===
        self.setup_menu()
        
        # === BARRE D'OUTILS ===
        self.setup_toolbar()
        
        # === LAYOUT PRINCIPAL ===
        main_frame = ttk.Frame(self.root, style='Professional.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === PANNEAU GAUCHE - OUTILS ===
        left_panel = ttk.Frame(main_frame, style='Professional.TFrame', width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 5))
        left_panel.pack_propagate(False)
        
        self.setup_left_panel(left_panel)
        
        # === VIEWPORT 3D CENTRAL ===
        center_frame = ttk.Frame(main_frame, style='Professional.TFrame')
        center_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        self.setup_3d_viewport(center_frame)
        
        # === PANNEAU DROIT - PROPRI√âT√âS ===
        right_panel = ttk.Frame(main_frame, style='Professional.TFrame', width=300)
        right_panel.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        right_panel.pack_propagate(False)
        
        self.setup_right_panel(right_panel)
        
        # === BARRE D'√âTAT ===
        self.setup_status_bar()
        
    def setup_menu(self):
        """Configure le menu principal."""
        menubar = tk.Menu(self.root, bg='#2b2b2b', fg='#ffffff')
        self.root.config(menu=menubar)
        
        # Menu Fichier
        file_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='#ffffff')
        menubar.add_cascade(label="Fichier", menu=file_menu)
        file_menu.add_command(label="Nouveau", command=self.new_project, accelerator="Ctrl+N")
        file_menu.add_command(label="Ouvrir...", command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="Sauvegarder", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="Exporter...", command=self.export_file, accelerator="Ctrl+E")
        file_menu.add_separator()
        file_menu.add_command(label="Quitter", command=self.root.quit, accelerator="Ctrl+Q")
        
        # Menu √âdition
        edit_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='#ffffff')
        menubar.add_cascade(label="√âdition", menu=edit_menu)
        edit_menu.add_command(label="Annuler", command=self.undo, accelerator="Ctrl+Z")
        edit_menu.add_command(label="Refaire", command=self.redo, accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="Dupliquer", command=self.duplicate_object, accelerator="Shift+D")
        edit_menu.add_command(label="Supprimer", command=self.delete_object, accelerator="Delete")
        
        # Menu G√©n√©ration
        generate_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='#ffffff')
        menubar.add_cascade(label="G√©n√©ration", menu=generate_menu)
        generate_menu.add_command(label="Texte vers 3D", command=self.text_to_3d_dialog)
        generate_menu.add_command(label="Image vers 3D", command=self.image_to_3d_dialog)
        generate_menu.add_command(label="Formes Primitives", command=self.primitive_shapes_dialog)
        
        # Menu Vue
        view_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='#ffffff')
        menubar.add_cascade(label="Vue", menu=view_menu)
        view_menu.add_command(label="Vue Face", command=lambda: self.set_view('front'))
        view_menu.add_command(label="Vue Droite", command=lambda: self.set_view('right'))
        view_menu.add_command(label="Vue Dessus", command=lambda: self.set_view('top'))
        view_menu.add_command(label="Vue Perspective", command=lambda: self.set_view('perspective'))
    
    def setup_toolbar(self):
        """Configure la barre d'outils."""
        toolbar = ttk.Frame(self.root, style='Professional.TFrame')
        toolbar.pack(fill=tk.X, padx=5, pady=(5, 0))
        
        # Outils de base
        ttk.Button(toolbar, text="üÜï Nouveau", command=self.new_project).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìÅ Ouvrir", command=self.open_file).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üíæ Sauver", command=self.save_file).pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, padx=5, fill=tk.Y)
        
        # Outils de g√©n√©ration
        ttk.Button(toolbar, text="üé® Texte‚Üí3D", command=self.text_to_3d_dialog).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üì∏ Image‚Üí3D", command=self.image_to_3d_dialog).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üîß Primitives", command=self.primitive_shapes_dialog).pack(side=tk.LEFT, padx=2)
        
        ttk.Separator(toolbar, orient=tk.VERTICAL).pack(side=tk.LEFT, padx=5, fill=tk.Y)
        
        # Outils de vue
        ttk.Button(toolbar, text="üîÑ Actualiser", command=self.refresh_viewport).pack(side=tk.LEFT, padx=2)
        
        # Mode de vue
        view_frame = ttk.Frame(toolbar)
        view_frame.pack(side=tk.RIGHT, padx=5)
        ttk.Label(view_frame, text="Mode:", style='Professional.TLabel').pack(side=tk.LEFT)
        
        self.view_mode = tk.StringVar(value="solid")
        view_combo = ttk.Combobox(view_frame, textvariable=self.view_mode, values=["wireframe", "solid", "textured"], width=10)
        view_combo.pack(side=tk.LEFT, padx=5)
        view_combo.bind('<<ComboboxSelected>>', self.on_view_mode_change)
    
    def setup_left_panel(self, parent):
        """Configure le panneau gauche avec les outils."""
        # Titre
        title_label = ttk.Label(parent, text="üõ†Ô∏è Outils & G√©n√©ration", style='Professional.TLabel', font=('Arial', 12, 'bold'))
        title_label.pack(pady=10)
        
        # Notebook pour organiser les outils
        notebook = ttk.Notebook(parent, style='Professional.TNotebook')
        notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === ONGLET G√âN√âRATION ===
        gen_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(gen_frame, text="G√©n√©ration")
        
        # G√©n√©ration par texte
        ttk.Label(gen_frame, text="üé® Texte vers 3D:", style='Professional.TLabel').pack(pady=(10, 5))
        self.text_prompt = tk.Text(gen_frame, height=3, bg='#404040', fg='#ffffff', wrap=tk.WORD)
        self.text_prompt.pack(fill=tk.X, padx=5, pady=5)
        self.text_prompt.insert('1.0', "un cube rouge avec des d√©tails complexes")
        
        ttk.Button(gen_frame, text="üöÄ G√©n√©rer", command=self.generate_from_text).pack(pady=5)
        
        # Formes primitives
        ttk.Label(gen_frame, text="üìê Formes Primitives:", style='Professional.TLabel').pack(pady=(20, 5))
        
        primitives_frame = ttk.Frame(gen_frame)
        primitives_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(primitives_frame, text="‚óºÔ∏è Cube", command=lambda: self.add_primitive('cube')).pack(side=tk.LEFT, padx=2)
        ttk.Button(primitives_frame, text="üîµ Sph√®re", command=lambda: self.add_primitive('sphere')).pack(side=tk.LEFT, padx=2)
        
        primitives_frame2 = ttk.Frame(gen_frame)
        primitives_frame2.pack(fill=tk.X, padx=5, pady=2)
        
        ttk.Button(primitives_frame2, text="üî∫ C√¥ne", command=lambda: self.add_primitive('cone')).pack(side=tk.LEFT, padx=2)
        ttk.Button(primitives_frame2, text="üî∂ Cylindre", command=lambda: self.add_primitive('cylinder')).pack(side=tk.LEFT, padx=2)
        
        # === ONGLET MODIFICATIONS ===
        mod_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(mod_frame, text="Modifications")
        
        ttk.Label(mod_frame, text="üîß Outils de Modification:", style='Professional.TLabel').pack(pady=(10, 5))
        
        ttk.Button(mod_frame, text="üìè Redimensionner", command=self.scale_dialog).pack(fill=tk.X, padx=5, pady=2)
        ttk.Button(mod_frame, text="üîÑ Rotation", command=self.rotate_dialog).pack(fill=tk.X, padx=5, pady=2)
        ttk.Button(mod_frame, text="üìç Translation", command=self.translate_dialog).pack(fill=tk.X, padx=5, pady=2)
        ttk.Button(mod_frame, text="üîß R√©parer Mesh", command=self.repair_mesh).pack(fill=tk.X, padx=5, pady=2)
        ttk.Button(mod_frame, text="‚ö° Optimiser", command=self.optimize_mesh).pack(fill=tk.X, padx=5, pady=2)
        
        # === ONGLET MAT√âRIAUX ===
        mat_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(mat_frame, text="Mat√©riaux")
        
        ttk.Label(mat_frame, text="üé® Mat√©riaux:", style='Professional.TLabel').pack(pady=(10, 5))
        
        # S√©lecteur de couleur basique
        color_frame = ttk.Frame(mat_frame)
        color_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.material_color = tk.StringVar(value="Rouge")
        colors = ["Rouge", "Vert", "Bleu", "Jaune", "Orange", "Violet", "Blanc", "Noir"]
        ttk.Combobox(color_frame, textvariable=self.material_color, values=colors).pack(fill=tk.X)
        
        ttk.Button(mat_frame, text="üé® Appliquer Couleur", command=self.apply_material).pack(fill=tk.X, padx=5, pady=5)
    
    def setup_3d_viewport(self, parent):
        """Configure le viewport 3D central."""
        # Titre du viewport
        viewport_header = ttk.Frame(parent, style='Professional.TFrame')
        viewport_header.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Label(viewport_header, text="üñ•Ô∏è Viewport 3D - MacForge3D Professional", 
                 style='Professional.TLabel', font=('Arial', 12, 'bold')).pack(side=tk.LEFT)
        
        # Figure matplotlib pour le rendu 3D
        self.fig = plt.figure(figsize=(10, 8), facecolor='#2b2b2b')
        self.ax = self.fig.add_subplot(111, projection='3d')
        self.ax.set_facecolor('#1a1a1a')
        
        # Configuration de l'apparence
        self.ax.grid(True, alpha=0.3)
        self.ax.set_xlabel('X', color='white')
        self.ax.set_ylabel('Y', color='white')
        self.ax.set_zlabel('Z', color='white')
        self.ax.tick_params(colors='white')
        
        # Canvas pour l'int√©gration tkinter
        self.canvas = FigureCanvasTkAgg(self.fig, parent)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Contr√¥les de viewport
        viewport_controls = ttk.Frame(parent, style='Professional.TFrame')
        viewport_controls.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Button(viewport_controls, text="üîÑ Reset Vue", command=self.reset_view).pack(side=tk.LEFT, padx=2)
        ttk.Button(viewport_controls, text="üîç Zoom Fit", command=self.zoom_fit).pack(side=tk.LEFT, padx=2)
        ttk.Button(viewport_controls, text="üíæ Screenshot", command=self.take_screenshot).pack(side=tk.LEFT, padx=2)
        
        # Affichage initial
        self.display_welcome_scene()
    
    def setup_right_panel(self, parent):
        """Configure le panneau droit avec les propri√©t√©s."""
        # Titre
        title_label = ttk.Label(parent, text="üìä Propri√©t√©s & Infos", style='Professional.TLabel', font=('Arial', 12, 'bold'))
        title_label.pack(pady=10)
        
        # Notebook pour les propri√©t√©s
        notebook = ttk.Notebook(parent, style='Professional.TNotebook')
        notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === ONGLET OBJET ===
        obj_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(obj_frame, text="Objet")
        
        self.object_info = tk.Text(obj_frame, height=10, bg='#404040', fg='#ffffff', wrap=tk.WORD)
        self.object_info.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === ONGLET PERFORMANCE ===
        perf_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(perf_frame, text="Performance")
        
        self.performance_info = tk.Text(perf_frame, height=10, bg='#404040', fg='#ffffff', wrap=tk.WORD)
        self.performance_info.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === ONGLET HISTORIQUE ===
        hist_frame = ttk.Frame(notebook, style='Professional.TFrame')
        notebook.add(hist_frame, text="Historique")
        
        self.history_list = tk.Listbox(hist_frame, bg='#404040', fg='#ffffff')
        self.history_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Mise √† jour initiale
        self.update_info_panels()
    
    def setup_status_bar(self):
        """Configure la barre d'√©tat."""
        self.status_bar = ttk.Frame(self.root, style='Professional.TFrame')
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM, padx=5, pady=5)
        
        self.status_text = tk.StringVar()
        self.status_text.set("üöÄ MacForge3D Professional - Pr√™t")
        
        ttk.Label(self.status_bar, textvariable=self.status_text, style='Professional.TLabel').pack(side=tk.LEFT)
        
        # Indicateur de performance
        self.perf_indicator = tk.StringVar()
        self.perf_indicator.set("‚ö° Ultra-Performance: Ready")
        ttk.Label(self.status_bar, textvariable=self.perf_indicator, style='Professional.TLabel').pack(side=tk.RIGHT)
    
    def setup_shortcuts(self):
        """Configure les raccourcis clavier."""
        self.root.bind('<Control-n>', lambda e: self.new_project())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        self.root.bind('<Control-z>', lambda e: self.undo())
        self.root.bind('<Control-y>', lambda e: self.redo())
        self.root.bind('<Delete>', lambda e: self.delete_object())
    
    # === M√âTHODES DE G√âN√âRATION ===
    
    def generate_from_text(self):
        """G√©n√®re un mod√®le 3D √† partir du texte."""
        prompt = self.text_prompt.get('1.0', tk.END).strip()
        if not prompt:
            messagebox.showwarning("Attention", "Veuillez entrer un prompt de g√©n√©ration")
            return
        
        self.status_text.set(f"üé® G√©n√©ration en cours: {prompt}")
        self.root.update()
        
        try:
            if self.engine:
                # Utilisation du moteur ultra-performance
                result = self.engine.generate_from_text(prompt)
                self.current_mesh = {
                    'vertices': result['vertices'],
                    'faces': result['faces'],
                    'name': f"Generated: {prompt[:20]}...",
                    'performance': result.get('performance', {})
                }
            else:
                # Mode de base
                self.current_mesh = self.generate_basic_shape(prompt)
            
            self.display_mesh()
            self.add_to_history(f"G√©n√©r√©: {prompt}")
            self.status_text.set("‚úÖ G√©n√©ration termin√©e avec succ√®s")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration: {str(e)}")
            self.status_text.set("‚ùå Erreur de g√©n√©ration")
    
    def generate_basic_shape(self, prompt):
        """G√©n√®re une forme basique selon le prompt."""
        prompt_lower = prompt.lower()
        
        if 'cube' in prompt_lower or 'box' in prompt_lower:
            vertices = np.array([
                [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],
                [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]
            ])
            faces = np.array([
                [0, 1, 2], [0, 2, 3], [4, 7, 6], [4, 6, 5],
                [0, 4, 5], [0, 5, 1], [2, 6, 7], [2, 7, 3],
                [0, 3, 7], [0, 7, 4], [1, 5, 6], [1, 6, 2]
            ])
        elif 'sphere' in prompt_lower or 'ball' in prompt_lower:
            # G√©n√©ration d'une sph√®re
            u = np.linspace(0, 2 * np.pi, 20)
            v = np.linspace(0, np.pi, 10)
            x = np.outer(np.cos(u), np.sin(v)).flatten()
            y = np.outer(np.sin(u), np.sin(v)).flatten()
            z = np.outer(np.ones(np.size(u)), np.cos(v)).flatten()
            vertices = np.column_stack([x, y, z])
            faces = self.triangulate_sphere(vertices)
        else:
            # Forme par d√©faut (t√©tra√®dre)
            vertices = np.array([
                [0, 0, 1], [1, 0, 0], [0, 1, 0], [0, 0, 0]
            ])
            faces = np.array([
                [0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]
            ])
        
        return {
            'vertices': vertices,
            'faces': faces,
            'name': f"Basic: {prompt[:20]}...",
            'performance': {'generation_time': 0.1, 'vertices_count': len(vertices)}
        }
    
    def triangulate_sphere(self, vertices):
        """Cr√©e des triangles pour une sph√®re."""
        # Triangulation basique pour d√©mo
        faces = []
        n = int(np.sqrt(len(vertices)))
        for i in range(n-1):
            for j in range(n-1):
                idx = i * n + j
                faces.append([idx, idx + 1, idx + n])
                faces.append([idx + 1, idx + n + 1, idx + n])
        return np.array(faces)
    
    def add_primitive(self, shape_type):
        """Ajoute une forme primitive."""
        shapes = {
            'cube': self.create_cube,
            'sphere': self.create_sphere,
            'cone': self.create_cone,
            'cylinder': self.create_cylinder
        }
        
        if shape_type in shapes:
            self.current_mesh = shapes[shape_type]()
            self.display_mesh()
            self.add_to_history(f"Ajout√©: {shape_type}")
            self.status_text.set(f"‚úÖ {shape_type.capitalize()} ajout√©")
    
    def create_cube(self):
        """Cr√©e un cube."""
        vertices = np.array([
            [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],
            [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]
        ])
        faces = np.array([
            [0, 1, 2], [0, 2, 3], [4, 7, 6], [4, 6, 5],
            [0, 4, 5], [0, 5, 1], [2, 6, 7], [2, 7, 3],
            [0, 3, 7], [0, 7, 4], [1, 5, 6], [1, 6, 2]
        ])
        return {'vertices': vertices, 'faces': faces, 'name': 'Cube', 'type': 'primitive'}
    
    def create_sphere(self):
        """Cr√©e une sph√®re."""
        try:
            sphere = trimesh.creation.icosphere(subdivisions=2)
            return {
                'vertices': sphere.vertices,
                'faces': sphere.faces,
                'name': 'Sph√®re',
                'type': 'primitive'
            }
        except:
            # Fallback sph√®re basique
            u = np.linspace(0, 2 * np.pi, 20)
            v = np.linspace(0, np.pi, 10)
            x = np.outer(np.cos(u), np.sin(v)).flatten()
            y = np.outer(np.sin(u), np.sin(v)).flatten()
            z = np.outer(np.ones(np.size(u)), np.cos(v)).flatten()
            vertices = np.column_stack([x, y, z])
            faces = self.triangulate_sphere(vertices)
            return {'vertices': vertices, 'faces': faces, 'name': 'Sph√®re', 'type': 'primitive'}
    
    def create_cone(self):
        """Cr√©e un c√¥ne."""
        try:
            cone = trimesh.creation.cone(radius=1, height=2)
            return {
                'vertices': cone.vertices,
                'faces': cone.faces,
                'name': 'C√¥ne',
                'type': 'primitive'
            }
        except:
            # Fallback c√¥ne basique
            vertices = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0], [-1, 0, 0], [0, -1, 0]])
            faces = np.array([[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1]])
            return {'vertices': vertices, 'faces': faces, 'name': 'C√¥ne', 'type': 'primitive'}
    
    def create_cylinder(self):
        """Cr√©e un cylindre."""
        try:
            cylinder = trimesh.creation.cylinder(radius=1, height=2)
            return {
                'vertices': cylinder.vertices,
                'faces': cylinder.faces,
                'name': 'Cylindre',
                'type': 'primitive'
            }
        except:
            # Fallback cylindre basique
            vertices = np.array([
                [1, 0, 1], [0, 1, 1], [-1, 0, 1], [0, -1, 1],
                [1, 0, -1], [0, 1, -1], [-1, 0, -1], [0, -1, -1]
            ])
            faces = np.array([
                [0, 1, 2], [0, 2, 3], [4, 6, 5], [4, 7, 6],
                [0, 4, 5], [0, 5, 1], [1, 5, 6], [1, 6, 2]
            ])
            return {'vertices': vertices, 'faces': faces, 'name': 'Cylindre', 'type': 'primitive'}
    
    # === M√âTHODES D'AFFICHAGE ===
    
    def display_mesh(self):
        """Affiche le mesh actuel dans le viewport."""
        if not self.current_mesh:
            return
        
        self.ax.clear()
        self.ax.set_facecolor('#1a1a1a')
        
        vertices = self.current_mesh['vertices']
        faces = self.current_mesh['faces']
        
        # Affichage selon le mode
        if self.viewport_mode == "wireframe":
            self.display_wireframe(vertices, faces)
        else:  # solid
            self.display_solid(vertices, faces)
        
        # Configuration des axes
        self.ax.set_xlabel('X', color='white')
        self.ax.set_ylabel('Y', color='white')
        self.ax.set_zlabel('Z', color='white')
        self.ax.tick_params(colors='white')
        
        # Ajustement de la vue
        if len(vertices) > 0:
            max_range = np.array([vertices[:,0].max()-vertices[:,0].min(),
                                vertices[:,1].max()-vertices[:,1].min(),
                                vertices[:,2].max()-vertices[:,2].min()]).max() / 2.0
            mid_x = (vertices[:,0].max()+vertices[:,0].min()) * 0.5
            mid_y = (vertices[:,1].max()+vertices[:,1].min()) * 0.5
            mid_z = (vertices[:,2].max()+vertices[:,2].min()) * 0.5
            
            self.ax.set_xlim(mid_x - max_range, mid_x + max_range)
            self.ax.set_ylim(mid_y - max_range, mid_y + max_range)
            self.ax.set_zlim(mid_z - max_range, mid_z + max_range)
        
        self.canvas.draw()
        self.update_info_panels()
    
    def display_wireframe(self, vertices, faces):
        """Affiche le mesh en mode wireframe."""
        for face in faces:
            if len(face) >= 3:
                # Dessiner les ar√™tes du triangle
                for i in range(len(face)):
                    v1 = vertices[face[i]]
                    v2 = vertices[face[(i+1) % len(face)]]
                    self.ax.plot([v1[0], v2[0]], [v1[1], v2[1]], [v1[2], v2[2]], 'cyan', alpha=0.8)
    
    def display_solid(self, vertices, faces):
        """Affiche le mesh en mode solid."""
        from mpl_toolkits.mplot3d.art3d import Poly3DCollection
        
        # Cr√©er les polygones pour l'affichage
        polygons = []
        for face in faces:
            if len(face) >= 3:
                polygon = [vertices[face[i]] for i in range(len(face))]
                polygons.append(polygon)
        
        if polygons:
            collection = Poly3DCollection(polygons, alpha=0.7, facecolor='lightblue', edgecolor='darkblue')
            self.ax.add_collection3d(collection)
    
    def display_welcome_scene(self):
        """Affiche la sc√®ne d'accueil."""
        self.ax.clear()
        self.ax.set_facecolor('#1a1a1a')
        
        # Texte de bienvenue
        self.ax.text(0, 0, 0, "üöÄ MacForge3D Professional\n\nG√©n√©rateur 3D Ultra-Performance\n\n" +
                    "‚Ä¢ Utilisez les outils √† gauche\n‚Ä¢ G√©n√©rez du contenu avec l'IA\n‚Ä¢ Explorez en 3D", 
                    fontsize=14, color='white', ha='center', va='center')
        
        self.ax.set_xlim(-2, 2)
        self.ax.set_ylim(-2, 2)
        self.ax.set_zlim(-2, 2)
        
        self.canvas.draw()
    
    def refresh_viewport(self):
        """Actualise le viewport."""
        if self.current_mesh:
            self.display_mesh()
        else:
            self.display_welcome_scene()
        self.status_text.set("üîÑ Viewport actualis√©")
    
    # === M√âTHODES D'INTERFACE ===
    
    def show_startup_message(self):
        """Affiche le message de d√©marrage."""
        self.status_text.set("üöÄ MacForge3D Professional - Interface 3D charg√©e")
        if self.engine:
            self.perf_indicator.set("‚ö° Ultra-Performance: 325k+ vertices/sec")
        else:
            self.perf_indicator.set("‚ö†Ô∏è Mode de base - Installez numpy pour ultra-performance")
    
    def update_info_panels(self):
        """Met √† jour les panneaux d'information."""
        # Info objet
        self.object_info.delete('1.0', tk.END)
        if self.current_mesh:
            info = f"üì¶ Objet: {self.current_mesh.get('name', 'Sans nom')}\n\n"
            info += f"üìä Vertices: {len(self.current_mesh['vertices']):,}\n"
            info += f"üî∫ Faces: {len(self.current_mesh['faces']):,}\n"
            if 'performance' in self.current_mesh:
                perf = self.current_mesh['performance']
                info += f"\n‚ö° Performance:\n"
                for key, value in perf.items():
                    info += f"  {key}: {value}\n"
        else:
            info = "Aucun objet s√©lectionn√©\n\nUtilisez les outils de g√©n√©ration\npour cr√©er du contenu 3D"
        
        self.object_info.insert('1.0', info)
        
        # Info performance
        self.performance_info.delete('1.0', tk.END)
        perf_text = "üöÄ MacForge3D Professional\n\n"
        if self.engine:
            perf_text += "‚úÖ Moteur Ultra-Performance: Actif\n"
            perf_text += "‚ö° Vitesse: 325,000+ vertices/sec\n"
            perf_text += "üîß Optimisation: Parall√®le\n"
            perf_text += "üé® IA G√©n√©rative: Disponible\n"
        else:
            perf_text += "‚ö†Ô∏è Mode de base actif\n"
            perf_text += "üí° Installez numpy pour ultra-performance\n"
        
        perf_text += f"\nüìà Statistiques session:\n"
        perf_text += f"  Op√©rations: {len(self.operation_history)}\n"
        perf_text += f"  Objets cr√©√©s: {len([h for h in self.operation_history if 'G√©n√©r√©' in h or 'Ajout√©' in h])}\n"
        
        self.performance_info.insert('1.0', perf_text)
    
    def add_to_history(self, operation):
        """Ajoute une op√©ration √† l'historique."""
        timestamp = time.strftime("%H:%M:%S")
        entry = f"[{timestamp}] {operation}"
        self.operation_history.append(entry)
        self.history_list.insert(tk.END, entry)
        self.history_list.see(tk.END)
    
    # === M√âTHODES PLACEHOLDER ===
    
    def new_project(self): 
        self.current_mesh = None
        self.display_welcome_scene()
        self.add_to_history("Nouveau projet")
    
    def open_file(self): 
        filename = filedialog.askopenfilename(filetypes=[("OBJ files", "*.obj"), ("STL files", "*.stl")])
        if filename:
            self.add_to_history(f"Ouvert: {os.path.basename(filename)}")
    
    def save_file(self): 
        if self.current_mesh:
            filename = filedialog.asksaveasfilename(filetypes=[("OBJ files", "*.obj")])
            if filename:
                self.add_to_history(f"Sauv√©: {os.path.basename(filename)}")
    
    def export_file(self): self.add_to_history("Export demand√©")
    def undo(self): self.add_to_history("Annulation")
    def redo(self): self.add_to_history("Refaire")
    def duplicate_object(self): self.add_to_history("Duplication")
    def delete_object(self): 
        self.current_mesh = None
        self.display_welcome_scene()
        self.add_to_history("Objet supprim√©")
    
    def text_to_3d_dialog(self): self.generate_from_text()
    def image_to_3d_dialog(self): self.add_to_history("Image‚Üí3D demand√©")
    def primitive_shapes_dialog(self): self.add_to_history("Primitives demand√©es")
    
    def set_view(self, view_type): 
        if view_type == 'front':
            self.ax.view_init(elev=0, azim=0)
        elif view_type == 'right':
            self.ax.view_init(elev=0, azim=90)
        elif view_type == 'top':
            self.ax.view_init(elev=90, azim=0)
        elif view_type == 'perspective':
            self.ax.view_init(elev=20, azim=45)
        self.canvas.draw()
        self.add_to_history(f"Vue: {view_type}")
    
    def on_view_mode_change(self, event):
        self.viewport_mode = self.view_mode.get()
        self.refresh_viewport()
    
    def reset_view(self): 
        self.ax.view_init(elev=20, azim=45)
        self.canvas.draw()
        self.add_to_history("Vue r√©initialis√©e")
    
    def zoom_fit(self): self.add_to_history("Zoom ajust√©")
    def take_screenshot(self): self.add_to_history("Screenshot pris")
    
    def scale_dialog(self): self.add_to_history("Redimensionnement")
    def rotate_dialog(self): self.add_to_history("Rotation")
    def translate_dialog(self): self.add_to_history("Translation")
    def repair_mesh(self): self.add_to_history("Mesh r√©par√©")
    def optimize_mesh(self): self.add_to_history("Mesh optimis√©")
    def apply_material(self): self.add_to_history(f"Mat√©riau appliqu√©: {self.material_color.get()}")
    
    def run(self):
        """Lance l'interface graphique."""
        print("üöÄ Lancement de MacForge3D Professional GUI...")
        self.root.mainloop()

def main():
    """Point d'entr√©e principal."""
    try:
        app = MacForge3DProfessionalGUI()
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        print("üí° V√©rifiez que toutes les d√©pendances sont install√©es")

if __name__ == "__main__":
    main()
