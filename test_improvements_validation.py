#!/usr/bin/env python3
"""
Script de validation des am√©liorations apport√©es √† MacForge3D.
Teste les nouvelles fonctionnalit√©s et optimisations.
"""

import sys
import os
import time
import numpy as np
import logging
from pathlib import Path

# Ajouter le r√©pertoire Python au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Python'))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_performance_optimizer_improvements():
    """Test des am√©liorations de l'optimiseur de performance."""
    logger.info("=== Test Performance Optimizer ===")
    
    try:
        from ai_models.performance_optimizer import PerformanceOptimizer
        import trimesh
        
        # Cr√©er un maillage test simple
        box = trimesh.creation.box(extents=[1, 1, 1])
        subdivided = box.subdivide()  # Augmenter la complexit√©
        
        logger.info(f"Maillage test cr√©√©: {len(subdivided.vertices)} vertices, {len(subdivided.faces)} faces")
        
        # Tester l'optimiseur
        optimizer = PerformanceOptimizer()
        
        start_time = time.time()
        optimized_mesh = optimizer.optimize_mesh(subdivided, level="medium")
        optimization_time = time.time() - start_time
        
        logger.info(f"Optimisation termin√©e en {optimization_time:.2f}s")
        logger.info(f"R√©sultat: {len(optimized_mesh.vertices)} vertices, {len(optimized_mesh.faces)} faces")
        
        # V√©rifier que l'optimisation a eu un effet
        assert len(optimized_mesh.vertices) <= len(subdivided.vertices), "L'optimisation devrait r√©duire ou maintenir le nombre de vertices"
        assert len(optimized_mesh.faces) <= len(subdivided.faces), "L'optimisation devrait r√©duire ou maintenir le nombre de faces"
        
        logger.info("‚úÖ Performance Optimizer: Test r√©ussi")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Performance Optimizer: Erreur - {e}")
        return False

def test_cache_optimizer_improvements():
    """Test des am√©liorations de l'optimiseur de cache."""
    logger.info("=== Test Cache Optimizer ===")
    
    try:
        from core.advanced_cache_optimizer import AdvancedCacheOptimizer
        
        # Cr√©er un optimiseur de cache
        cache_optimizer = AdvancedCacheOptimizer(max_memory_mb=100)
        
        # Tester les op√©rations de base
        test_data = {"key1": np.random.random(100), "key2": "test_string", "key3": [1, 2, 3, 4, 5]}
        
        # Ins√©rer des donn√©es
        for i, (key, data) in enumerate(test_data.items()):
            cache_optimizer.put(key, data, priority=i+1)
        
        # R√©cup√©rer les donn√©es
        for key in test_data.keys():
            retrieved_data = cache_optimizer.get(key)
            assert retrieved_data is not None, f"Donn√©es pour {key} non trouv√©es"
        
        # Tester l'optimisation
        optimization_result = cache_optimizer.optimize_cache()
        assert 'total_time_ms' in optimization_result, "R√©sultat d'optimisation invalide"
        
        # Tester la pr√©diction d'acc√®s futur
        future_prob = cache_optimizer._access_predictor.predict_future_access("key1", 3600)
        assert 0 <= future_prob <= 1, "Probabilit√© d'acc√®s futur invalide"
        
        logger.info("‚úÖ Cache Optimizer: Test r√©ussi")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Cache Optimizer: Erreur - {e}")
        return False

def test_mesh_enhancer_improvements():
    """Test des am√©liorations de l'am√©liorateur de maillage."""
    logger.info("=== Test Mesh Enhancer ===")
    
    try:
        from ai_models.mesh_enhancer import MeshEnhancer, MeshEnhancementConfig
        import torch
        import trimesh
        
        # Cr√©er un maillage test
        sphere = trimesh.creation.icosphere(subdivisions=2)
        logger.info(f"Sph√®re test: {len(sphere.vertices)} vertices, {len(sphere.faces)} faces")
        
        # Convertir en tenseurs PyTorch
        vertices = torch.tensor(sphere.vertices, dtype=torch.float32)
        faces = torch.tensor(sphere.faces, dtype=torch.long)
        
        # Cr√©er l'am√©liorateur
        config = MeshEnhancementConfig(device="cpu")  # Forcer CPU pour la compatibilit√©
        enhancer = MeshEnhancer(config)
        
        # Tester le lissage pr√©servant les ar√™tes
        smoothed_vertices = enhancer.edge_preserving_smooth(
            vertices, faces, 
            iterations=2, 
            edge_threshold=0.3
        )
        
        assert smoothed_vertices.shape == vertices.shape, "Les dimensions doivent √™tre pr√©serv√©es"
        
        # V√©rifier que le lissage a eu un effet (changement des positions)
        vertex_diff = torch.norm(smoothed_vertices - vertices, dim=1).mean()
        assert vertex_diff > 0, "Le lissage devrait modifier les positions des vertices"
        
        logger.info(f"Lissage appliqu√© avec succ√®s, changement moyen: {vertex_diff:.4f}")
        logger.info("‚úÖ Mesh Enhancer: Test r√©ussi")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Mesh Enhancer: Erreur - {e}")
        return False

def test_text_effects_improvements():
    """Test des am√©liorations des effets de texte."""
    logger.info("=== Test Text Effects ===")
    
    try:
        from ai_models.text_effects import TextEffects
        import trimesh
        
        # Cr√©er un maillage test simple
        box = trimesh.creation.box(extents=[2, 1, 0.5])
        logger.info(f"Bo√Æte test: {len(box.vertices)} vertices, {len(box.faces)} faces")
        
        # Cr√©er le gestionnaire d'effets
        effects = TextEffects()
        
        # Tester le lissage am√©lior√©
        smoothed_mesh = effects._apply_smoothing(box, iterations=3)
        
        assert isinstance(smoothed_mesh, trimesh.Trimesh), "Le r√©sultat doit √™tre un maillage Trimesh"
        assert len(smoothed_mesh.vertices) == len(box.vertices), "Le nombre de vertices doit √™tre pr√©serv√©"
        assert len(smoothed_mesh.faces) == len(box.faces), "Le nombre de faces doit √™tre pr√©serv√©"
        
        # V√©rifier que le lissage a modifi√© les positions
        vertex_diff = np.linalg.norm(smoothed_mesh.vertices - box.vertices, axis=1).mean()
        logger.info(f"Changement moyen des vertices apr√®s lissage: {vertex_diff:.4f}")
        
        logger.info("‚úÖ Text Effects: Test r√©ussi")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Text Effects: Erreur - {e}")
        return False

def test_global_orchestrator_improvements():
    """Test des am√©liorations de l'orchestrateur global."""
    logger.info("=== Test Global Performance Orchestrator ===")
    
    try:
        from core.global_performance_orchestrator import GlobalPerformanceOrchestrator
        
        # Cr√©er l'orchestrateur
        orchestrator = GlobalPerformanceOrchestrator()
        
        # Tester la collecte de m√©triques
        metrics = orchestrator._collect_system_metrics()
        required_keys = ['cpu_usage', 'memory_usage', 'memory_available_gb']
        
        for key in required_keys:
            assert key in metrics, f"M√©trique {key} manquante"
            assert isinstance(metrics[key], (int, float)), f"M√©trique {key} doit √™tre num√©rique"
        
        # Tester la d√©termination de s√©quence d'optimisation
        sequence = orchestrator._determine_optimization_sequence(metrics)
        assert isinstance(sequence, dict), "La s√©quence doit √™tre un dictionnaire"
        assert len(sequence) > 0, "La s√©quence ne doit pas √™tre vide"
        
        # Tester l'optimisation globale (version limit√©e pour les tests)
        start_time = time.time()
        results = orchestrator.optimize_all_modules()
        optimization_time = time.time() - start_time
        
        assert isinstance(results, dict), "Les r√©sultats doivent √™tre un dictionnaire"
        assert optimization_time < 10, "L'optimisation ne devrait pas prendre plus de 10 secondes"
        
        logger.info(f"Optimisation globale termin√©e en {optimization_time:.2f}s")
        logger.info("‚úÖ Global Performance Orchestrator: Test r√©ussi")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Global Performance Orchestrator: Erreur - {e}")
        return False

def main():
    """Fonction principale de validation."""
    logger.info("üöÄ D√©marrage des tests de validation des am√©liorations MacForge3D")
    logger.info("=" * 60)
    
    tests = [
        test_performance_optimizer_improvements,
        test_cache_optimizer_improvements,
        test_mesh_enhancer_improvements,
        test_text_effects_improvements,
        test_global_orchestrator_improvements
    ]
    
    results = {}
    total_tests = len(tests)
    passed_tests = 0
    
    for test_func in tests:
        test_name = test_func.__name__.replace('test_', '').replace('_improvements', '')
        logger.info(f"\nüìã Ex√©cution du test: {test_name}")
        
        try:
            result = test_func()
            results[test_name] = result
            if result:
                passed_tests += 1
        except Exception as e:
            logger.error(f"‚ùå Erreur critique dans {test_name}: {e}")
            results[test_name] = False
    
    # Rapport final
    logger.info("\n" + "=" * 60)
    logger.info("üìä RAPPORT FINAL DE VALIDATION")
    logger.info("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name:<30} : {status}")
    
    success_rate = (passed_tests / total_tests) * 100
    logger.info(f"\nüéØ Taux de r√©ussite: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 80:
        logger.info("üéâ Validation R√âUSSIE! Les am√©liorations fonctionnent correctement.")
        return 0
    elif success_rate >= 60:
        logger.info("‚ö†Ô∏è  Validation PARTIELLE. Quelques am√©liorations n√©cessitent attention.")
        return 1
    else:
        logger.info("üö® Validation √âCHOU√âE. R√©vision majeure n√©cessaire.")
        return 2

if __name__ == "__main__":
    sys.exit(main())